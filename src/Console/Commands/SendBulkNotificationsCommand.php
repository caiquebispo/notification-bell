<?php

namespace CaiqueBispo\NotificationBell\Console\Commands;

use Illuminate\Console\Command;
use CaiqueBispo\NotificationBell\Helpers\NotificationHelper;


class SendBulkNotificationsCommand extends Command
{
    protected $signature = 'notifications:send-bulk
                          {title : T√≠tulo da notifica√ß√£o}
                          {message : Mensagem da notifica√ß√£o}
                          {--type=info : Tipo da notifica√ß√£o (info, success, warning, error)}
                          {--users= : IDs dos usu√°rios separados por v√≠rgula}
                          {--all-users : Enviar para todos os usu√°rios}
                          {--url= : URL de a√ß√£o}
                          {--dry-run : Apenas simular o envio}';

    protected $description = 'Enviar notifica√ß√µes em massa para usu√°rios';

    public function handle()
    {
        $title = $this->argument('title');
        $message = $this->argument('message');
        $type = $this->option('type');
        $userIds = $this->option('users');
        $allUsers = $this->option('all-users');
        $url = $this->option('url');
        $dryRun = $this->option('dry-run');

        if (!in_array($type, ['info', 'success', 'warning', 'error'])) {
            $this->error("‚ùå Tipo inv√°lido. Use: info, success, warning, error");
            return 1;
        }

        if ($allUsers) {
            $users = \App\Models\User::pluck('id')->toArray();
        } elseif ($userIds) {
            $users = array_map('intval', explode(',', $userIds));
        } else {
            $this->error("‚ùå Especifique --users ou --all-users");
            return 1;
        }

        $this->info("üìß Preparando envio de notifica√ß√£o em massa...");
        $this->line('');

        $this->table(
            ['Campo', 'Valor'],
            [
                ['T√≠tulo', $title],
                ['Mensagem', substr($message, 0, 50) . (strlen($message) > 50 ? '...' : '')],
                ['Tipo', ucfirst($type)],
                ['Destinat√°rios', count($users) . ' usu√°rio(s)'],
                ['URL de A√ß√£o', $url ?: 'Nenhuma'],
                ['Modo', $dryRun ? 'Simula√ß√£o (Dry Run)' : 'Envio Real']
            ]
        );

        $this->line('');
        $countUser = count($users);

        if ($dryRun) {
            $this->warn("‚ö†Ô∏è  Modo simula√ß√£o - nenhuma notifica√ß√£o ser√° enviada");
            $this->info("‚úÖ {$countUser} notifica√ß√µes seriam enviadas");
            return 0;
        }

        if (!$this->confirm("Confirma o envio para " . count($users) . " usu√°rio(s)?")) {
            $this->info("‚ùå Opera√ß√£o cancelada");
            return 0;
        }

        $this->info("üì§ Enviando notifica√ß√µes...");

        $bar = $this->output->createProgressBar(count($users));
        $bar->start();

        $sent = 0;
        $errors = 0;

        foreach ($users as $userId) {
            try {
                NotificationHelper::create($userId, $title, $message, $type, null, $url);
                $sent++;
            } catch (\Exception $e) {
                $errors++;
                $this->line('');
                $this->error("‚ùå Erro ao enviar para usu√°rio {$userId}: " . $e->getMessage());
            }

            $bar->advance();
        }

        $bar->finish();
        $this->line('');
        $this->line('');

        $this->info("‚úÖ Envio conclu√≠do!");
        $this->info("üìä Enviadas: {$sent}");
        if ($errors > 0) {
            $this->warn("‚ö†Ô∏è  Erros: {$errors}");
        }

        return 0;
    }
}
